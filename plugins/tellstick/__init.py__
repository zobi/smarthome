#!/usr/bin/env python3
# vim: set encoding=utf-8 tabstop=4 softtabstop=4 shiftwidth=4 expandtab
#########################################################################
#  Copyright 2014-2015 Matthieu Gaigniere                matthieu@ip42.eu
#########################################################################
#
#  Utilisation
#  -----------
#
#  Activation du plugin dans le fichier `etc/plugin.conf`
#  
#      [tellstick]
#        class_name = Tellstick
#        class_path = plugins.tellstick
#  
#  
#  Ajouter les arguments suivants aux items Tellstick :
#  
#      - ts_id : identifiant de l'appareil
#  
#  Exemple :
#  
#      [cuisine]
#        [[volet]]
#          type = bool
#          ts_id = 1
#
#########################################################################

import logging
import threading
import struct
import binascii
import os

logger = logging.getLogger('')


class Tellstick:

    def __init__(self, smarthome):
        self._sh = smarthome
        self._ids = {}

    def run(self):
        self.alive = True

    def stop(self):
        self.alive = False
        self.handle_close()

    def parse_item(self, item):
        if 'ts_id' in item.conf:
            id_ = item.conf['ts_id']
            logger.debug("Tellstick: item {0} with ID {1} found".format(item, id_))
            return self.update_item
        return None

    def update_item(self, item, caller=None, source=None, dest=None):
        if 'ts_id' in item.conf:
            new_value = item()
            status = 'on' if new_value else 'off'
            logger.info("Tellstick: update item {0} with status {1}".format(item, status))
            self._exec_cmd("tdtool --{0} {1}".format(status, item.conf['ts_id']))

    def _exec_cmd(self, cmd): 
        logger.debug("Tellstick cmd: {0}".format(cmd))
        os.system(cmd)

    def parse_logic(self, logic):
        logger.debug("Launch telegram, receive : {0}".format(repr(logic)))
        return None
